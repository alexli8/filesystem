(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{406:function(t,e,_){"use strict";_.r(e);var v=_(46),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"top命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#top命令"}},[t._v("#")]),t._v(" top命令")]),t._v(" "),_("h3",{attrs:{id:"_1-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[t._v("#")]),t._v(" 1.介绍")]),t._v(" "),_("p",[t._v("top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。显示系统当前的进程和其他状况；top是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。")]),t._v(" "),_("p",[t._v("比较准确的说，top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表，该命令可以按CPU使用。内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。")]),t._v(" "),_("h3",{attrs:{id:"_2-使用实例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用实例"}},[t._v("#")]),t._v(" 2.使用实例")]),t._v(" "),_("p",[t._v("在测试服务上执行:")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("[root@node14 ~]# top\n")])])]),_("p",[t._v("可以看到以下输出:")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("top - 15:21:57 up 35 days, 23:36,  2 users,  load average: 0.00, 0.01, 0.05\nTasks: 458 total,   1 running, 457 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem : 98471920 total, 93746288 free,  3247464 used,  1478164 buff/cache\nKiB Swap:  4194300 total,  4194300 free,        0 used. 94255184 avail Mem \n\nPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                                                                                \n24275 root      20   0  162520   2680   1580 R   0.7  0.0   0:01.58 top                                                                                                                                                                                                    \n1 root      20   0   51824   4068   2592 S   0.0  0.0  11:47.29 systemd                                                                                                                                                                                                \n2 root      20   0       0      0      0 S   0.0  0.0   0:00.82 kthreadd                                                                                                                                                                                               \n4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                                                                                                                                                           \n5 root      20   0       0      0      0 S   0.0  0.0   0:00.04 kworker/u96:0                                                                                                                                                                                          \n6 root      20   0       0      0      0 S   0.0  0.0   0:17.95 ksoftirqd/0                                                                                                                                                                                            \n7 root      rt   0       0      0      0 S   0.0  0.0   0:00.21 migration/0                                                                                                                                                                                            \n8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh                                                                                                                                                                                                 \n9 root      20   0       0      0      0 S   0.0  0.0   4:08.51 rcu_sched                                                                                                                                                                                              \n10 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 lru-add-drain                                                                                                                                                                                          \n11 root      rt   0       0      0      0 S   0.0  0.0   0:09.30 watchdog/0                                                                                                                                                                                             \n12 root      rt   0       0      0      0 S   0.0  0.0   0:08.00 watchdog/1                                                                                                                                                                                             \n13 root      rt   0       0      0      0 S   0.0  0.0   0:00.21 migration/1                                                                                                                                                                                            \n14 root      20   0       0      0      0 S   0.0  0.0   0:00.03 ksoftirqd/1                                                                                                                                                                                            \n16 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H                                                                                                                                                                                           \n17 root      20   0       0      0      0 S   0.0  0.0   0:03.37 kworker/u97:0                                                                                                                                                                                          \n18 root      rt   0       0      0      0 S   0.0  0.0   0:07.95 watchdog/2                                                                                                                                                                                             \n19 root      rt   0       0      0      0 S   0.0  0.0   0:00.22 migration/2                                                                                                                                                                                            \n20 root      20   0       0      0      0 S   0.0  0.0   0:00.02 ksoftirqd/2    \n\n")])])]),_("p",[t._v("统计信息区前五行是系统整体的统计信息。第一行是任务队列信息，同 uptime  命令的执行结果。第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。")]),t._v(" "),_("h4",{attrs:{id:"输出说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#输出说明"}},[t._v("#")]),t._v(" 输出说明")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[_("div",{staticStyle:{width:"250px"}},[t._v("信息")])]),t._v(" "),_("th",[t._v("含义")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("15:21:57")]),t._v(" "),_("td",[t._v("当前时间")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("up 35 days, 23:36")]),t._v(" "),_("td",[t._v("系统运行时间，格式为天，时:分")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("2 user")]),t._v(" "),_("td",[t._v("当前登录用户数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("load average: 0.00, 0.01, 0.05")]),t._v(" "),_("td",[t._v("系统负载，即任务队列的平均长度。三个数值分别为  1分钟、5分钟、15分钟前到现在的平均值。")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Tasks: 458 total")]),t._v(" "),_("td",[t._v("进程总数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("1 running")]),t._v(" "),_("td",[t._v("正在运行的进程数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("457 sleeping")]),t._v(" "),_("td",[t._v("睡眠的进程数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0 stopped")]),t._v(" "),_("td",[t._v("停止的进程数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0 zombie")]),t._v(" "),_("td",[t._v("僵尸进程数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Cpu(s): 0.0 us")]),t._v(" "),_("td",[t._v("用户空间占用CPU百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.0 sy")]),t._v(" "),_("td",[t._v("内核空间占用CPU百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.0 ni")]),t._v(" "),_("td",[t._v("用户进程空间内改变过优先级的进程占用CPU百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("100.0 id")]),t._v(" "),_("td",[t._v("空闲CPU百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.0 wa")]),t._v(" "),_("td",[t._v("等待输入输出的CPU时间百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.0 hi")]),t._v(" "),_("td",[t._v("硬件中断")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.0 si")]),t._v(" "),_("td",[t._v("软件中断")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0.0 st")]),t._v(" "),_("td",[t._v("实时")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Mem: 98471920 total")]),t._v(" "),_("td",[t._v("物理内存总量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("3247464 used")]),t._v(" "),_("td",[t._v("使用的物理内存总量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("93746288 free")]),t._v(" "),_("td",[t._v("空闲内存总量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("1478164 buff/cache")]),t._v(" "),_("td",[t._v("用作内核缓存的内存量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Swap: 4194300 total")]),t._v(" "),_("td",[t._v("交换区总量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("0k used")]),t._v(" "),_("td",[t._v("使用的交换区总量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("4194300 free")]),t._v(" "),_("td",[t._v("空闲交换区总量")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("94255184 avail")]),t._v(" "),_("td",[t._v("缓冲的交换区总量。内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小。相应的内存再次被换出时可不必再对交换区写入。")])])])]),t._v(" "),_("p",[t._v("进程信息区统计信息区域的下方显示了各个进程的详细信息。")]),t._v(" "),_("h4",{attrs:{id:"输出说明-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#输出说明-2"}},[t._v("#")]),t._v(" 输出说明")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("序号")]),t._v(" "),_("th",[t._v("含义")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("PID")]),t._v(" "),_("td",[t._v("进程id")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("PPID")]),t._v(" "),_("td",[t._v("父进程id")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("RUSER")]),t._v(" "),_("td",[t._v("Real user name")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("UID")]),t._v(" "),_("td",[t._v("进程所有者的用户id")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("USER")]),t._v(" "),_("td",[t._v("进程所有者的用户名")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("GROUP")]),t._v(" "),_("td",[t._v("进程所有者的组名")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("TTY")]),t._v(" "),_("td",[t._v("启动进程的终端名。不是从终端启动的进程则显示为 ?")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("PR")]),t._v(" "),_("td",[t._v("优先级")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("NI")]),t._v(" "),_("td",[t._v("nice值。负值表示高优先级，正值表示低优先级")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("P")]),t._v(" "),_("td",[t._v("最后使用的CPU，仅在多CPU环境下有意义")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("%CPU")]),t._v(" "),_("td",[t._v("上次更新到现在的CPU时间占用百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("TIME")]),t._v(" "),_("td",[t._v("进程使用的CPU时间总计，单位秒")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("TIME+")]),t._v(" "),_("td",[t._v("进程使用的CPU时间总计，单位1/100秒")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("%MEM")]),t._v(" "),_("td",[t._v("进程使用的物理内存百分比")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("VIRT")]),t._v(" "),_("td",[t._v("进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("SWAP")]),t._v(" "),_("td",[t._v("进程使用的虚拟内存中，被换出的大小，单位kb。")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("RES")]),t._v(" "),_("td",[t._v("进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("CODE")]),t._v(" "),_("td",[t._v("可执行代码占用的物理内存大小，单位kb")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("DATA")]),t._v(" "),_("td",[t._v("可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("SHR")]),t._v(" "),_("td",[t._v("共享内存大小，单位kb")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("nFLT")]),t._v(" "),_("td",[t._v("页面错误次数")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("nDRT")]),t._v(" "),_("td",[t._v("最后一次写入到现在，被修改过的页面数。")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("S")]),t._v(" "),_("td",[t._v("进程状态。D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("COMMAND")]),t._v(" "),_("td",[t._v("命令名/命令行")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("WCHAN")]),t._v(" "),_("td",[t._v("若该进程在睡眠，则显示睡眠中的系统函数名")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Flags")]),t._v(" "),_("td",[t._v("任务标志，参考 sched.h")])])])]),t._v(" "),_("p",[t._v("默认情况下仅显示比较重要的  PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND  列。可以通过下面的快捷键来更改显示内容。\n更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z  即可显示或隐藏对应的列，最后按回车键确定。")]),t._v(" "),_("p",[t._v("按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z  可以将相应的列向左移动。最后按回车键确定。\n按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的  R 键可以将当前的排序倒转。")]),t._v(" "),_("h3",{attrs:{id:"_3-进程状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-进程状态"}},[t._v("#")]),t._v(" 3.进程状态")]),t._v(" "),_("p",[t._v("进行状态和操作系统里对CPU、进程以及调度涉及内容较多，下面详细解释一下进程状态的不同含义：")]),t._v(" "),_("ul",[_("li",[t._v("D (TASK_UNINTERRUPTIBLE)，不可中断睡眠态。顾名思义，位于这种状态的进程处于睡眠中，并且不允许被其他进程或中断(异步信号)打断。因此这种状态的进程，是无法使用kill -9杀死的(kill也是一种信号)，除非重启系统(没错，就是这么头硬)。不过这种状态一般由I/O等待(比如磁盘I/O、网络I/O、外设I/O等)引起，出现时间非常短暂，大多很难被PS或者TOP命令捕获(除非I/O HANG死)。SLEEP态进程不会占用任何CPU资源。")]),t._v(" "),_("li",[t._v("R (TASK_RUNNING)，可执行态。这种状态的进程都位于CPU的可执行队列中，正在运行或者正在等待运行，即不是在上班就是在上班的路上。")]),t._v(" "),_("li",[t._v("S (TASK_INTERRUPTIBLE)，可中断睡眠态。不同于D，这种状态的进程虽然也处于睡眠中，但是是允许被中断的。这种进程一般在等待某事件的发生（比如socket连接、信号量等），而被挂起。一旦这些时间完成，进程将被唤醒转为R态。如果不在高负载时期，系统中大部分进程都处于S态。SLEEP态进程不会占用任何CPU资源。")]),t._v(" "),_("li",[t._v("T&t (__TASK_STOPPED & __TASK_TRACED)，暂停or跟踪态。这种两种状态的进程都处于运行停止的状态。不同之处是暂停态一般由于收到SIGSTOP、SIGTSTP、SIGTTIN、SIGTTOUT四种信号被停止，而跟踪态是由于进程被另一个进程跟踪引起(比如gdb断点）。暂停态进程会释放所有占用资源。")]),t._v(" "),_("li",[t._v("Z (EXIT_ZOMBIE), 僵尸态。这种状态的进程实际上已经结束了，但是父进程还没有回收它的资源（比如进程的描述符、PID等）。僵尸态进程会释放除进程入口之外的所有资源。")]),t._v(" "),_("li",[t._v("X (EXIT_DEAD), 死亡态。进程的真正结束态，这种状态一般在正常系统中捕获不到。")])]),t._v(" "),_("h4",{attrs:{id:"top命令对于系统性能分析与优化十分重要-在后面的问题分析中会经常用到。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#top命令对于系统性能分析与优化十分重要-在后面的问题分析中会经常用到。"}},[t._v("#")]),t._v(" top命令对于系统性能分析与优化十分重要，在后面的问题分析中会经常用到。")])])}),[],!1,null,null,null);e.default=a.exports}}]);